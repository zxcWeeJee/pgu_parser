import os
from dotenv import load_dotenv
import time
import requests
from bs4 import BeautifulSoup
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timedelta
import asyncio
import json
import logging
import re
from urllib.parse import urljoin

load_dotenv()

# –ª–æ–≥–∏—Ä—É–µ–º —ë–ø—Ç–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≤—Å—è–∫–∞—è ***** (–ø–æ —Ç–∏–ø—É —Å–∞–π—Ç–∞ –ø–≥—É)
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
CHECK_INTERVAL = 300  # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
URL = "http://abitur.spsu.ru/"
STATE_FILE = "bot_state.json" 

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π User-Agent
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                  'AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/91.0.4472.124 Safari/537.36'
}

def load_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(STATE_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {
            "last_news": "",
            "subscribed_users": {},
            "all_news": {}
        }

def save_state(state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f)

def fetch_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞"""
    try:
        response = requests.get(URL, headers=HEADERS, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        news_items = []
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        carousel = soup.select_one('.jtcs119.owl-carousel')
        if not carousel:
            logger.warning("–ö–∞—Ä—É—Å–µ–ª—å –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞—Ä—É—Å–µ–ª–∏
        for slide in carousel.select('.slide'):
            try:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
                title_tag = slide.select_one('.jt-title')
                if not title_tag:
                    continue
                title = title_tag.text.strip()
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
                link = title_tag.get('href', '')
                if link:
                    link = urljoin(URL, link)
                else:
                    logger.warning(f"–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏: {title}")
                    continue
                
                # –î–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
                date_tag = slide.select_one('.jtc_introdate')
                date_str = date_tag.text.strip() if date_tag else ""
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ timestamp
                timestamp = time.time()
                if date_str:
                    try:
                        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
                        months = {
                            '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03',
                            '–∞–ø—Ä–µ–ª—è': '04', '–º–∞—è': '05', '–∏—é–Ω—è': '06',
                            '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08', '—Å–µ–Ω—Ç—è–±—Ä—è': '09',
                            '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
                        }
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ "22 –∏—é–ª—è 2025" -> "22.07.2025"
                        parts = date_str.split()
                        if len(parts) >= 3:
                            day = parts[0].zfill(2)
                            month_ru = parts[1]
                            year = parts[2]
                            
                            month = months.get(month_ru.lower(), '01')
                            date_obj = datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y")
                            timestamp = date_obj.timestamp()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                
                news_items.append({
                    'title': title,
                    'link': link,
                    'date': date_str,
                    'timestamp': timestamp
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                
        return news_items
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return None

def format_news_message(news_list):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not news_list:
        return "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç"
    
    message = "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
    for news in news_list:
        message += f"‚Ä¢ [{news['title']}]({news['link']}) ({news['date']})\n"
    
    return message

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        state = load_state()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
        state['subscribed_users'][str(user.id)] = {
            'name': user.full_name,
            'last_notified': ""
        }
        save_state(state)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö —Å —Å–∞–π—Ç–∞ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –ü–ì–£.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/news - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/last24 - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        news_list = fetch_news()
        if not news_list:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        message = format_news_message(news_list)
        await update.message.reply_text(
            message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /news: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

async def last24(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /last24 - –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    try:
        news_list = fetch_news()
        if not news_list:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        time_24h_ago = time.time() - 86400
        recent_news = [n for n in news_list if n['timestamp'] > time_24h_ago]
        
        if not recent_news:
            await update.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
            return
        
        message = format_news_message(recent_news)
        await update.message.reply_text(
            message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /last24: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

async def check_news_updates(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        state = load_state()
        last_news = state.get('last_news', '')
        news_list = fetch_news()
        
        if not news_list:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        current_latest = news_list[0]['link']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if current_latest == last_news:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
        state['last_news'] = current_latest
        state['all_news'] = {n['link']: n for n in news_list}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –∫–ª—é—á
        save_state(state)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ—è–≤–∏–≤—à–∏–µ—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
        new_news = []
        for news in news_list:
            if news['link'] == last_news:
                break
            new_news.append(news)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user_id in state['subscribed_users']:
            try:
                for news_item in reversed(new_news):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                    message = (
                        f"üî• *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!* ({news_item['date']})\n\n"
                        f"[{news_item['title']}]({news_item['link']})"
                    )
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="Markdown",
                        disable_web_page_preview=False
                    )
                    await asyncio.sleep(0.5)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("news", news))
    application.add_handler(CommandHandler("last24", last24))
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    job_queue = application.job_queue
    job_queue.run_repeating(
        check_news_updates, 
        interval=CHECK_INTERVAL, 
        first=10  # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()